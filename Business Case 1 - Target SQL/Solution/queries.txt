01A

select Column_Name, Data_type
from `Target.INFORMATION_SCHEMA.COLUMNS`
where table_name = 'customers';

---------------------------------------------------------------------------
01B

select  
min(order_purchase_timestamp) as First_Order_Placed_Date,
max(order_purchase_timestamp) as Recent_Order_Placed_Date,
date_diff(max(order_purchase_timestamp) , min(order_purchase_timestamp), DAY) as Data_Range_Days
from `Target.orders`;
---------------------------------------------------------------------------
01C

select 
count( distinct C.customer_state) as State_Count,
count( distinct C.customer_city) as City_Count
from `Target.customers` C
join `Target.orders` O on C.customer_id = O.customer_id;

select 
C.customer_state, 
count( distinct C.customer_city) as City_Count
from `Target.customers` C
join `Target.orders` O on C.customer_id = O.customer_id
group by 1 order by 2 desc;
---------------------------------------------------------------------------
02A

select tbl1.Order_Year, tbl1.Total_Orders,
sum(tbl1.Total_Orders) over(order by tbl1.Order_Year ) as Cummulative_Orders
from (
select 
format_timestamp('%Y' , order_purchase_timestamp) as Order_Year, 
count(*) as Total_Orders
from `Target.orders`
group by 1
order by 1 desc) as tbl1;


select tbl1.Order_Year_Month, tbl1.Total_Orders,
sum(tbl1.Total_Orders) over(order by tbl1.Order_Year_Month ) as Cummulative_Orders
from (
select 
format_timestamp('%Y-%m' , order_purchase_timestamp) as Order_Year_Month, 
count(*) as Total_Orders
from `Target.orders`
group by 1
order by 1 desc) as tbl1;

---------------------------------------------------------------------------
02B

select 
tbl1.Order_Month, tbl1.Total_Orders, 
concat(round(ifnull(100*(tbl1.Total_Orders - lag(tbl1.Total_Orders) over(Order by Order_Month asc ))/tbl1.Total_Orders,0),2),'%') as Prev_Montly_Comparision
from
(select 
format_timestamp('%m' , order_purchase_timestamp) as Order_Month, 
count(*) as Total_Orders,
from `Target.orders`
group by 1
) as tbl1
order by 1 asc
---------------------------------------------------------------------------
02C

select 
case 
when extract(HOUR from order_purchase_timestamp) between 0 and 6 then 'Dawn'
when extract(HOUR from order_purchase_timestamp) between 7 and 12 then 'Mornings'
when cast(format_timestamp('%H', order_purchase_timestamp) as INT64) between 13 and 18 then 'Afternoon'
else 'Night'
end as Time_of_the_Day,
count(*) as No_Of_Ordes
from `Target.orders` 
Group by 1 order by 2 desc limit 1;

---------------------------------------------------------------------------
03A

select C.customer_state, extract(MONTH from O.order_purchase_timestamp) as Order_Month, 
count(*) as Orders
from `Target.orders` O
left join `Target.customers` C  on O.customer_id = C.customer_id
group by 1,2
order by 1, 2 ASC;

select 
C.customer_state,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 1 then 1 else 0 end ) as Jan,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 2 then 1 else 0 end ) as Feb,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 3 then 1 else 0 end ) as Mar,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 4 then 1 else 0 end ) as Apr,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 5 then 1 else 0 end ) as May,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 6 then 1 else 0 end ) as Jun,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 7 then 1 else 0 end ) as Jul,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 8 then 1 else 0 end ) as Aug,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 9 then 1 else 0 end ) as Sep,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 10 then 1 else 0 end ) as Oct,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 11 then 1 else 0 end ) as Nov,
sum(case when extract(MONTH from O.order_purchase_timestamp) = 12 then 1 else 0 end ) as Dec
from `Target.orders` O
left join `Target.customers` C  on O.customer_id = C.customer_id
group by 1;

---------------------------------------------------------------------------
03B

select customer_state, count(distinct customer_unique_id) Count_Customes 
from `Target.customers` 
group by 1 
order by 2 DESC;
---------------------------------------------------------------------------
04A

select 
#Year, Cost_of_Orders,
concat(round(ifnull(100*(Cost_of_Orders - lag(Cost_of_orders) over(order by Year))/lag(Cost_of_orders) over(order by Year),0),2),'%') as percentage_increase
from 
(Select extract(YEAR from O.order_purchase_timestamp) as Year, round(sum(P.payment_value),2) as Cost_of_Orders
from `Target.orders` O 
join `Target.payments` P on O.order_id = P.order_id
where
extract(YEAR from O.order_purchase_timestamp) in (2017, 2018) and
extract(MONTH from O.order_purchase_timestamp) between 1 and 8
group by 1 ) as tbl1
order by Year Desc
limit 1;

---------------------------------------------------------------------------
04B

select C.customer_state, round(sum(tbl_order.Order_Total),2) as Total_Order_Price, round(avg(tbl_order.Order_Total),2) as Average_Order_Price,
#count(tbl_order.Order_id) as orders, count(distinct tbl_order.Order_id) as distinct_orders
from `Target.customers` C join 
(
select O.customer_id as customer_id,  O.order_id as Order_id, round(sum(P.payment_value),2) as Order_Total
from `Target.orders` O 
join `Target.payments` P on O.order_id = P.order_id
group by 1,2
) tbl_order
on C.customer_id = tbl_order.customer_id
group by 1 order by 1;

-- We should not use this, Here the commented values do not match -- 

select C.customer_state, round(sum(P.payment_value),2) as Total_Order_Price, round(avg(P.payment_value),2) as Average_Order_Price, 
#count(P.order_id) as Orders, count ( distinct P.order_id) as Distinct_Orders
from `Target.customers` C
join `Target.orders` O on C.customer_id = O.customer_id
join `Target.payments` P on O.order_id = P.order_id
group by 1
order by 1;

---------------------------------------------------------------------------
04C 

select C.customer_state, round(sum(tbl_Freight.Freight_by_Order),2) as Total_Freight, round(avg(tbl_Freight.Freight_by_Order),2) as Average_Freigh
from `Target.customers` C
join `Target.orders` O on C.customer_id = O.customer_id
join (
select order_id, round(sum(freight_value),2) as Freight_by_Order
from `Target.order_items`
group by 1 ) as tbl_Freight
on O.order_id = tbl_Freight.order_id
group by 1 order by 1
---------------------------------------------------------------------------
05A

select order_id,
date_diff(order_delivered_customer_date , order_purchase_timestamp, DAY) as time_to_deliver,
date_diff(order_delivered_customer_date, order_estimated_delivery_date, DAY) as diff_estimated_delivery
from `Target.orders` where order_delivered_customer_date is not null
order by 2 desc, 3;

---------------------------------------------------------------------------
05B

WITH CTE_State_AVG_FREIGHT as (
select C.customer_state, round(avg(tbl_Freight.Freight_by_Order),2) as Average_Freigh,
dense_rank() over(order by avg(tbl_Freight.Freight_by_Order) desc ) as DESC_RNK,
dense_rank() over(order by avg(tbl_Freight.Freight_by_Order) asc ) as ASC_RNK
from `Target.customers` C
join `Target.orders` O on C.customer_id = O.customer_id
join (
select order_id, round(sum(freight_value),2) as Freight_by_Order
from `Target.order_items`
group by 1 ) as tbl_Freight
on O.order_id = tbl_Freight.order_id
group by 1 
)
select H.customer_state as Highest_Avg_Freight, L.customer_state as Lowest_Avg_Freight
from CTE_State_AVG_FREIGHT H
join CTE_State_AVG_FREIGHT L on H.DESC_RNK = L.ASC_RNK
where H.DESC_RNK <=5
order by H.DESC_RNK;


---------------------------------------------------------------------------
05C
With CTE_AVG_DEV_TIME as 
( select C.customer_state as State, round(avg(date_diff(O.order_delivered_customer_date, O.order_purchase_timestamp, DAY)),2) as Avg_Del_Time
from `Target.orders` O
join `Target.customers` C on O.customer_id = C.customer_id
where O.order_delivered_customer_date is not null
group by 1 ),
CTE_STATE_RNK as
(
  select State, Avg_Del_Time ,
  dense_rank() over(order by Avg_Del_Time Desc) as H_RANK,
  dense_rank() over(order by Avg_Del_Time ) as L_RANK
  from CTE_AVG_DEV_TIME
)
select H.State as High_Delivery_Time,
L.State as Low_Delivery_State 
from CTE_STATE_RNK H join CTE_STATE_RNK L on H.H_Rank = L.L_Rank 
where H.H_Rank <=5;

---------------------------------------------------------------------------
05D

With CTE_FAST_DEL as 
( select C.customer_state as State, round(avg(date_diff(O.order_estimated_delivery_date,O.order_delivered_customer_date, DAY)),2) as Fast_del
from `Target.orders` O
join `Target.customers` C on O.customer_id = C.customer_id
where O.order_delivered_customer_date is not null
group by 1 ),
CTE_FAST_DEL_RNK as
(
  select State, Fast_del ,
  dense_rank() over(order by Fast_del desc) as H_RANK,
  from CTE_FAST_DEL
)
select State from CTE_FAST_DEL_RNK
where H_rank <=5
order by H_Rank
;

---------------------------------------------------------------------------
06A

WITH CTE_Order_Payment_type_combination as (
select distinct O.order_id, 
format_timestamp('%Y-%m',order_purchase_timestamp) as order_purchase,
P.payment_type
from `Target.orders` O 
join `Target.payments` P on O.order_id = P.order_id
where P.payment_value > 0
),
CTE_Date_payment_type_count as (
  select order_purchase, payment_type, count(*) as No_of_Order
  from CTE_Order_Payment_type_combination
  group by 1, 2
  order by 1, 2
)
select payment_type, order_purchase, No_of_Order,
sum(No_of_Order) over (partition by payment_type order by order_purchase) as month_on_month_Order
from CTE_Date_payment_type_count
order by 1, 2
---------------------------------------------------------------------------
06B
select payment_installments, count(distinct order_id) from 
`Target.payments`
where 
payment_type = 'credit_card'
and 
payment_installments > 1 and payment_value > 0 
group by 1
having count(order_id) > 1;

---------------------------------------------------------------------------
